/*
 *  This file is part of varr-numerics, an experimental variable resolution
 *  primitive numerics library.
 *
 *  Copyright (C) 2019 Cardiff University
 *
 *  varr-numerics is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  varr-numerics is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with varr-numerics.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef __VARR_3_OVER_4_H__
#define __VARR_3_OVER_4_H__

#include <stddef.h>

/*
 * An object that provides a VARR implementation of the real power 
 * function, pow(x, 3./4.).
 * 
 * This implementation provides a scalar real pow(x, 3./4.) root function 
 * named 'threequartersd'.
 */
typedef struct tagVARR3Over4DEvaluator
{
   void const * accelerator;
   
   /*
    * A VARR real pow(x, 3./4.) function.  The first argument to this method
    * is the number, x, for which pow(x, 3/4.) is to be evaluated and returned.
    * x must be a finite strictly positive real number.
    */
   double (* threequartersd) (double, void const * accelerator);
   
   int (* disallocate) (struct tagVARR3Over4DEvaluator *);
} VARR3Over4DEvaluator;

/*
 * Returns an object that provides a VARR implementation of the real 
 * pow(x, 3/4.) function.   See documentation for the type VARR3Over4DEvaluator
 * for further information.
 *
 * This implementation uses linear interpolation techniques combined with 
 * sampling and a modified De-Bruijn-like method to compute the value of 
 * pow(x, 3./4.).
 * 
 * This function allocates a sampling grid of real pow(x, 3./4.) values.
 * The size of this sampling grid is indicated by the argument 
 * 'number_of_samples', which must be nonzero.  The amount of memory allocated 
 * by this function is approximately proportional to the number of sampling 
 * points requested.  The numerical accuracy of the resulting pow function 
 * that is generated by this method generally increases with the number of 
 * sampling points requested.
 *
 * When evaluating pow(x, 3/4.) (VARR3Over4DEvaluator.threequartersd(x)) using 
 * this method, all arguments x must be finite real numbers confined to the 
 * range 10**-18 < x < 10**+18.
 */
VARR3Over4DEvaluator
linear_sampling_normalizing_3over4d(size_t number_of_samples);

#endif /* __VARR_3_OVER_4_H__ */
