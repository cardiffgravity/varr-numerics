/*
 *  This file is part of varr-numerics, an experimental variable resolution
 *  primitive numerics library.
 *
 *  Copyright (C) 2019 Cardiff University
 *
 *  varr-numerics is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  varr-numerics is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with varr-numerics.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef __VARR_ATAN_H__
#define __VARR_ATAN_H__

#include <stddef.h>

/*
 * An object that provides a VARR implementation of the real arctangent 
 * function.
 * 
 * This implementation provides scalar and vector arctangent functions as 
 * follows:
 *    i.    'atan' - a function accepting one real number, x, and returning 
 *          a VARR approximation of atan(x);
 *    ii.   'atan_array' - a vectorized version of (i.).
 */
typedef struct tagVARRAtanDEvaluator {
   void const * accelerator;
   
   /*
    * A VARR real arctangent function.  The first argument to this method is the
    * number, x, for which atan(x) is to be evaluated and returned.
    *
    * This method uses sampling techniques to compute the arctangent.  If |x| > 
    * 50.then this method clamps x into the range -50 <= x <= 50.
    *
    * This function does not return meaningful values if the input, x, is not 
    * a finite real number.
    */
   double (* atan) (double, void const * accelerator);
   
   /*
    * A vectorized VARR real arctangent function.  The meaning of arguments to 
    * this method are as follows:
    * 
    *    i..   'in' - a const array of doubles, being the values of x to 
    *          process;
    *    ii.   'out' - an array of doubles of (at least) the same length as 
    *          (i.), being the values of atan(x) to assign;
    *    iii.  'length' - the length of the arrays (i.) and (ii.) above.
    *,   iv.   'accelerator' - the value of the above enclosed (void *) 
    *          accelerator.
    *
    * This function does not return meaningful values if the inputs (i.) are
    * not finite real numbers.  It is the responsibility of the caller to ensure
    * that the arrays (i.) and (ii.) both have size (iii.).
    *
    * It is not necessary for the arrays (i.) or (ii.) to have any specific
    * alignments.  If this library is compiled without AVX extensions enabled,
    * this method will delegate to the above scalar VARR implementation of 
    * arctangent.
    */
   void (* atan_array) (
      double const * in, double * out, 
      size_t length, 
      void const * accelerator
      );
   
   int (* disallocate) (struct tagVARRAtanDEvaluator *);
   
} VARRAtanDEvaluator;

/*
 * Returns an object that provides a VARR implementation of the real 
 * arctangent function.   See documentation for the type VARRAtanDEvaluator
 * for further information.
 * 
 * This function allocates a sampling grid of arctangent values.  The size of
 * this sampling grid is indicated by the argument 'number_of_samples', which
 * must be nonzero.  The amount of memory allocated by this function is
 * approximately proportional to the number of sampling points requested.  The
 * numerical accuracy of the arctangent function that is generated by this
 * method generally increases with the number of sampling points requested.
 */
VARRAtanDEvaluator
clamping_linear_interpolating_atand(size_t number_of_samples);

#endif /* __VARR_ATAN_H__ */
