/*
 *  This file is part of varr-numerics, an experimental variable resolution
 *  primitive numerics library.
 *
 *  Copyright (C) 2019 Cardiff University
 *
 *  varr-numerics is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  varr-numerics is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with varr-numerics.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef __VARR_GENERAL_BOUND_LINBUF_H__
#define __VARR_GENERAL_BOUND_LINBUF_H__

#include <stddef.h>

/*
 * An object that provides a VARR implementation of a general bound linear
 * buffer (a 'linbuf').
 * 
 * This implementation provides a scalar linbuf function, 'scalar', which is a 
 * function that accepts one real number (x) and returns the approximate value
 * of a customizable delegate function, d(x) . A batch function is also 
 * provided, 'batch', which accepts a contiguous array of input values (x) and 
 * returns a contiguous array of approximate delegate values corresponding.
 * 
 * It is the responsibility of the caller to ensure that pointer arguments to
 * any method enclosed by this struct are non-null and reference valid objects, 
 * and that any numerical arguments provided are finite.
 */
typedef struct tagVARRBoundGLBAccelerator {
   void const * accelerator;
   
   /*
    * A VARR real bound linbuf function.  The first argument to this method is 
    * the number, x, for which d(x) (above) is to be approximated and returned.
    */
   double (* scalar) (double, void const * accelerator);
   
   /*
    * A VARR batch linbuf function. The first argument to this method is a 
    * pointer to a contiguous array of numbers, x, being the arguments
    * where the values of the linbuf delegate d (above) are to be approximated.
    * The second argument is a pointer to an array of output values, to be
    * populated with the approximate values of the delegate d(x) evaluated at 
    * the corresponding values of x. 'length' is the number of inputs, the 
    * number of entries in the array x. 'x' and 'out' need not have any special
    * byte alignments.
    */
   void (* batch) (
      double const * x,
      double * out,
      size_t length,
      void const * accelerator
      );
   
   int (* disallocate) (struct tagVARRBoundGLBAccelerator *);
} VARRBoundGLBAccelerator;

/*
 * Returns an object that provides a VARR implementation of a delegating 
 * general linbuf.  See documentation of the type VARRBoundGLBAccelerator for 
 * further information.
 * 
 * General linbuf VARR functions represent any double-valued function 
 * (the 'delegate', d) over a fixed customizable real interval [min_x, max_x]. 
 * The delegate is a function of a number (x) in this interval, including its 
 * endpoints. d(x, p) may have additional arguments and/or specializations which
 * are provided in terms of a void *, being its second argument 'p'. A general 
 * linbuf representation of the function d = cos(a * x) is specified by a 
 * delegate whose signature is double(double x, void * p), where p is a struct 
 * containing the required value of a.
 *
 * This method allocates a sampling grid of delegate values d(x, p) for
 * a fixed quantity p.  The size of the sampling grid generated by this method 
 * is indicated by the argument 'number_of_samples', which must be nonzero. 
 * The amount of memory allocated by this function is approximately proportional
 * to the number of sampling points requested.  The numerical accuracy of the 
 * VARR function that is generated by this method generally increases with the 
 * number of sampling points requested if d is smooth and does not vary 
 * aggressively in x.
 *
 * This function does not return meaningful values if the inputs min_x or max_x
 * are not finite real numbers for which min_x < max_x. The 
 * VARRBoundGLBAccelerator object returned by this method will clamp any finite
 * evaluation point (x) into the range [min_x, max_x].
 * 
 * It is the responsibility of the caller to ensure that pointer arguments 
 * supplied reference valid objects and are not null.
 */
VARRBoundGLBAccelerator
bound_general_linbuf(
   size_t number_of_samples,
   double min_x,
   double max_x,
   double (* delegate) (double x, void *),
   void * specialization
   );

#endif /* __VARR_GENERAL_BOUND_LINBUF_H__ */
