/*
 *  This file is part of varr-numerics, an experimental variable resolution
 *  primitive numerics library.
 *
 *  Copyright (C) 2019 Cardiff University
 *
 *  varr-numerics is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  varr-numerics is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with varr-numerics.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef __VARR_LOG_H__
#define __VARR_LOG_H__

#include <stddef.h>

/*
 * An object that provides a VARR implementation of the real natural logarithm 
 * function.
 * 
 * This implementation provides a scalar real natural logarithm function 
 * named 'logd'.
 */
typedef struct tagVARRLogDEvaluator {
   void const * accelerator;
   
   /*
    * A VARR real natural logarithm function.  The first argument to this method
    * is the number, x, for which log(x) is to be evaluated and returned.  x
    * must be a finite strictly positive real number.
    */
   double (* logd) (double, void const * accelerator);
   
   /*
    * A vectorized VARR real natural logarithm function.  The meaning of 
    * arguments to this method are as follows:
    * 
    *    i..   'in' - a const array of doubles, being the values of x to 
    *          process;
    *    ii.   'out' - an array of doubles of (at least) the same length as 
    *          (i.), being the values of log(x) to assign;
    *    iii.  'length' - the length of the arrays (i.) and (ii.) above.
    *,   iv.   'accelerator' - the value of the above enclosed (void *) 
    *          accelerator.
    *
    * It is the responsibility of the caller to ensure that the arrays (i.) and 
    * (ii.) both have size (iii.).
    *
    * It is not necessary for the arrays (i.) or (ii.) to have any specific
    * alignments.  If this library is compiled without AVX extensions enabled,
    * this method will delegate to the above scalar VARR implementation of 
    * the logarithm function.
    */
   void (* logd_array) (
      double const * in, double * out,
      size_t length, 
      void const * accelerator
      );
   
   int (* disallocate) (struct tagVARRLogDEvaluator *);
} VARRLogDEvaluator;

/*
 * Returns an object that provides a VARR implementation of the real 
 * natural logarithm function.   See documentation for the type 
 * VARRLogDEvaluator for further information.
 *
 * This implementation uses linear interpolation techniques combined with 
 * sampling and a modified De-Bruijn-like method to compute the real 
 * natural logarithm.
 * 
 * This function allocates a sampling grid of real natural logarithm values.
 * The size of this sampling grid is indicated by the argument 
 * 'number_of_samples', which must be nonzero.  The amount of memory allocated 
 * by this function is approximately proportional to the number of sampling 
 * points requested.  The numerical accuracy of the natural logarithm function 
 * that is generated by this method generally increases with the number of 
 * sampling points requested.
 *
 * When evaluating log(x) (VARRLogDEvaluator.logd(x)) using this method, all 
 * arguments x must be finite real numbers confined to the range 2**-63 < x 
 * < 2**+63.
 */
VARRLogDEvaluator
normalizing_linear_sampling_logd(size_t number_of_samples);

/*
 * Returns an object that provides a VARR implementation of the real 
 * natural logarithm function.   See documentation for the type 
 * VARRLogDEvaluator for further information.
 *
 * This implementation uses sublinear (non-interpolating) techniques combined
 * sampling to compute the real natural logarithm.
 * 
 * This function allocates a sampling grid of real natural logarithm values.
 * The size of this sampling grid is indicated by the argument 
 * 'number_of_samples', which must be nonzero.  The amount of memory allocated 
 * by this function is approximately proportional to the number of sampling 
 * points requested.  The numerical accuracy of the natural logarithm function 
 * that is generated by this method generally increases with the number of 
 * sampling points requested.  The numerical accuracy of this implementation
 * is markedly less than its linear (interpolating) sampling VARR variant.
 *
 * When evaluating log(x) (VARRLogDEvaluator.logd(x)) using this method, all 
 * arguments x must be finite real numbers confined to the range 2**-63 < x 
 * < 2**+63.
 */
VARRLogDEvaluator
normalizing_sublinear_sampling_logd(size_t number_of_samples);

/*
 * Returns an object that provides a VARR implementation of the real 
 * natural logarithm function.   See documentation for the type 
 * VARRLogDEvaluator for further information.
 *
 * This method uses a power series to compute the natural logarithm.  The number
 * of terms comprising this power series is indicated by the argument
 * 'number_of_iterations', which should be nonzero.  This power series 
 * consists of positive integer powers of (y - 1)**2/(y + 1)**2 where 
 * y = x/10**q and q is selected so that |y| < 1.  The rate of convergence of 
 * this power series, for any given x, is generally proportional to the value of
 * 'number_of_iterations'.
 * 
 * This function allocates minimal memory or no memory.  The numerical accuracy
 * of the natural logarithm function that is generated by this method generally 
 * increases with the number of iterations requested.
 *
 * 'number_of_iterations' must be nonzero and must not exceed 500.   When 
 * evaluating log(x) (VARRLogDEvaluator.logd(x)) using this method, all 
 * arguments x must be finite real numbers confined to the range 10**-5 < x 
 * < 10**5.
 */
VARRLogDEvaluator
quad_series_logd(size_t number_of_iterations);

#endif /* __VARR_LOG_H__ */
